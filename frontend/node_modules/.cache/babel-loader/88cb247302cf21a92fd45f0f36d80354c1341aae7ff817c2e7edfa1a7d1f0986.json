{"ast":null,"code":"// // src/store/slices/cartSlice.js\n// import { createSlice } from '@reduxjs/toolkit';\n\n// const initialState = {\n//   items: [],\n//   isLoading: false,\n//   error: null\n// };\n\n// const cartSlice = createSlice({\n//   name: 'cart',\n//   initialState,\n//   reducers: {\n//     addItem: (state, action) => {\n//       const { product, quantity = 1 } = action.payload;\n//       const existingItem = state.items.find(item => item.id === product.id);\n\n//       if (existingItem) {\n//         existingItem.quantity += quantity;\n//       } else {\n//         state.items.push({ ...product, quantity });\n//       }\n//     },\n//     removeItem: (state, action) => {\n//       state.items = state.items.filter(item => item.id !== action.payload);\n//     },\n//     updateQuantity: (state, action) => {\n//       const { productId, quantity } = action.payload;\n//       const item = state.items.find(item => item.id === productId);\n//       if (item && quantity > 0) {\n//         item.quantity = quantity;\n//       }\n//     },\n//     clearCart: (state) => {\n//       state.items = [];\n//     },\n//     setLoading: (state, action) => {\n//       state.isLoading = action.payload;\n//     },\n//     setError: (state, action) => {\n//       state.error = action.payload;\n//     }\n//   }\n// });\n\n// export const {\n//   addItem,\n//   removeItem,\n//   updateQuantity,\n//   clearCart,\n//   setLoading,\n//   setError\n// } = cartSlice.actions;\n\n// export default cartSlice.reducer;\n// src/store/slices/cartSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  isLoading: false,\n  error: null\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addItem: (state, action) => {\n      const {\n        _id,\n        name,\n        price,\n        image\n      } = action.payload;\n      const existingItem = state.items.find(item => item._id === _id);\n      if (existingItem) {\n        existingItem.quantity += 1;\n      } else {\n        state.items.push({\n          _id,\n          name,\n          price,\n          image,\n          quantity: 1\n        });\n      }\n    },\n    removeItem: (state, action) => {\n      state.items = state.items.filter(item => item._id !== action.payload);\n    },\n    updateQuantity: (state, action) => {\n      const {\n        productId,\n        quantity\n      } = action.payload;\n      const item = state.items.find(item => item._id === productId);\n      if (item && quantity > 0) {\n        item.quantity = quantity;\n      }\n    },\n    clearCart: state => {\n      state.items = [];\n    },\n    setLoading: (state, action) => {\n      state.isLoading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  addItem,\n  removeItem,\n  updateQuantity,\n  clearCart,\n  setLoading,\n  setError\n} = cartSlice.actions;\n\n// Селектори\nexport const selectCartItems = state => state.cart.items;\nexport const selectCartTotal = state => state.cart.items.reduce((total, item) => total + item.price * item.quantity, 0);\nexport const selectCartItemsCount = state => state.cart.items.reduce((count, item) => count + item.quantity, 0);\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","items","isLoading","error","cartSlice","name","reducers","addItem","state","action","_id","price","image","payload","existingItem","find","item","quantity","push","removeItem","filter","updateQuantity","productId","clearCart","setLoading","setError","actions","selectCartItems","cart","selectCartTotal","reduce","total","selectCartItemsCount","count","reducer"],"sources":["/Users/serhii_bondariev/Documents/GitHub/PowerTools/frontend/src/store/slices/cartSlice.js"],"sourcesContent":["// // src/store/slices/cartSlice.js\n// import { createSlice } from '@reduxjs/toolkit';\n\n// const initialState = {\n//   items: [],\n//   isLoading: false,\n//   error: null\n// };\n\n// const cartSlice = createSlice({\n//   name: 'cart',\n//   initialState,\n//   reducers: {\n//     addItem: (state, action) => {\n//       const { product, quantity = 1 } = action.payload;\n//       const existingItem = state.items.find(item => item.id === product.id);\n\n//       if (existingItem) {\n//         existingItem.quantity += quantity;\n//       } else {\n//         state.items.push({ ...product, quantity });\n//       }\n//     },\n//     removeItem: (state, action) => {\n//       state.items = state.items.filter(item => item.id !== action.payload);\n//     },\n//     updateQuantity: (state, action) => {\n//       const { productId, quantity } = action.payload;\n//       const item = state.items.find(item => item.id === productId);\n//       if (item && quantity > 0) {\n//         item.quantity = quantity;\n//       }\n//     },\n//     clearCart: (state) => {\n//       state.items = [];\n//     },\n//     setLoading: (state, action) => {\n//       state.isLoading = action.payload;\n//     },\n//     setError: (state, action) => {\n//       state.error = action.payload;\n//     }\n//   }\n// });\n\n// export const {\n//   addItem,\n//   removeItem,\n//   updateQuantity,\n//   clearCart,\n//   setLoading,\n//   setError\n// } = cartSlice.actions;\n\n// export default cartSlice.reducer;\n// src/store/slices/cartSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  items: [],\n  isLoading: false,\n  error: null,\n};\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addItem: (state, action) => {\n      const { _id, name, price, image } = action.payload;\n      const existingItem = state.items.find((item) => item._id === _id);\n\n      if (existingItem) {\n        existingItem.quantity += 1;\n      } else {\n        state.items.push({\n          _id,\n          name,\n          price,\n          image,\n          quantity: 1,\n        });\n      }\n    },\n    removeItem: (state, action) => {\n      state.items = state.items.filter((item) => item._id !== action.payload);\n    },\n    updateQuantity: (state, action) => {\n      const { productId, quantity } = action.payload;\n      const item = state.items.find((item) => item._id === productId);\n      if (item && quantity > 0) {\n        item.quantity = quantity;\n      }\n    },\n    clearCart: (state) => {\n      state.items = [];\n    },\n    setLoading: (state, action) => {\n      state.isLoading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n    },\n  },\n});\n\nexport const { addItem, removeItem, updateQuantity, clearCart, setLoading, setError } =\n  cartSlice.actions;\n\n// Селектори\nexport const selectCartItems = (state) => state.cart.items;\nexport const selectCartTotal = (state) =>\n  state.cart.items.reduce((total, item) => total + item.price * item.quantity, 0);\nexport const selectCartItemsCount = (state) =>\n  state.cart.items.reduce((count, item) => count + item.quantity, 0);\n\nexport default cartSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}