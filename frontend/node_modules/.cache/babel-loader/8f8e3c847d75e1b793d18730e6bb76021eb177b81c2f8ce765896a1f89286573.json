{"ast":null,"code":"// src/store/slices/ordersSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../utils/axios';\n\n// Створення замовлення\nexport const createOrder = createAsyncThunk('orders/createOrder', async (orderData, {\n  rejectWithValue\n}) => {\n  try {\n    console.log('Sending order data:', orderData); // Для відладки\n    const {\n      data\n    } = await api.post('/api/orders', orderData);\n    return data;\n  } catch (error) {\n    var _error$response, _error$response2, _error$response2$data;\n    console.error('Error creating order:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data); // Для відладки\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to create order');\n  }\n});\n\n// Отримання всіх замовлень користувача\nexport const getUserOrders = createAsyncThunk('orders/getUserOrders', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const {\n      data\n    } = await api.get('/orders/my-orders');\n    return data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    return rejectWithValue(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch orders');\n  }\n});\n\n// Отримання деталей замовлення\nexport const getOrderDetails = createAsyncThunk('orders/getOrderDetails', async (orderId, {\n  rejectWithValue\n}) => {\n  try {\n    const {\n      data\n    } = await api.get(`/api/orders/${orderId}`);\n    return data;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    return rejectWithValue(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to fetch order details');\n  }\n});\n\n// Оновлення статусу замовлення (для адміна)\nexport const updateOrderStatus = createAsyncThunk('orders/updateOrderStatus', async ({\n  orderId,\n  status\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const {\n      data\n    } = await api.put(`/orders/${orderId}/status`, {\n      status\n    });\n    return data;\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    return rejectWithValue(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to update order status');\n  }\n});\nconst initialState = {\n  orders: [],\n  currentOrder: null,\n  loading: false,\n  error: null,\n  successMessage: null\n};\nconst ordersSlice = createSlice({\n  name: 'orders',\n  initialState,\n  reducers: {\n    clearError: state => {\n      state.error = null;\n    },\n    clearSuccessMessage: state => {\n      state.successMessage = null;\n    },\n    clearCurrentOrder: state => {\n      state.currentOrder = null;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Create Order\n    .addCase(createOrder.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(createOrder.fulfilled, (state, action) => {\n      state.loading = false;\n      state.orders.unshift(action.payload);\n      state.currentOrder = action.payload;\n      state.successMessage = 'Order created successfully';\n    }).addCase(createOrder.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Get User Orders\n    .addCase(getUserOrders.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(getUserOrders.fulfilled, (state, action) => {\n      state.loading = false;\n      state.orders = action.payload;\n    }).addCase(getUserOrders.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Get Order Details\n    .addCase(getOrderDetails.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(getOrderDetails.fulfilled, (state, action) => {\n      state.loading = false;\n      state.currentOrder = action.payload;\n    }).addCase(getOrderDetails.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Update Order Status\n    .addCase(updateOrderStatus.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(updateOrderStatus.fulfilled, (state, action) => {\n      state.loading = false;\n      state.currentOrder = action.payload;\n      state.orders = state.orders.map(order => order._id === action.payload._id ? action.payload : order);\n      state.successMessage = 'Order status updated successfully';\n    }).addCase(updateOrderStatus.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\n\n// Селектори\nexport const selectAllOrders = state => state.orders.orders;\nexport const selectCurrentOrder = state => state.orders.currentOrder;\nexport const selectOrdersLoading = state => state.orders.loading;\nexport const selectOrdersError = state => state.orders.error;\nexport const selectOrdersSuccessMessage = state => state.orders.successMessage;\n\n// Actions\nexport const {\n  clearError,\n  clearSuccessMessage,\n  clearCurrentOrder\n} = ordersSlice.actions;\nexport default ordersSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","createOrder","orderData","rejectWithValue","console","log","data","post","error","_error$response","_error$response2","_error$response2$data","response","message","getUserOrders","_","get","_error$response3","_error$response3$data","getOrderDetails","orderId","_error$response4","_error$response4$data","updateOrderStatus","status","put","_error$response5","_error$response5$data","initialState","orders","currentOrder","loading","successMessage","ordersSlice","name","reducers","clearError","state","clearSuccessMessage","clearCurrentOrder","extraReducers","builder","addCase","pending","fulfilled","action","unshift","payload","rejected","map","order","_id","selectAllOrders","selectCurrentOrder","selectOrdersLoading","selectOrdersError","selectOrdersSuccessMessage","actions","reducer"],"sources":["/Users/serhii_bondariev/Documents/GitHub/PowerTools/frontend/src/store/slices/ordersSlice.js"],"sourcesContent":["// src/store/slices/ordersSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../utils/axios';\n\n// Створення замовлення\nexport const createOrder = createAsyncThunk(\n  'orders/createOrder',\n  async (orderData, { rejectWithValue }) => {\n    try {\n      console.log('Sending order data:', orderData); // Для відладки\n      const { data } = await api.post('/api/orders', orderData);\n      return data;\n    } catch (error) {\n      console.error('Error creating order:', error.response?.data); // Для відладки\n      return rejectWithValue(error.response?.data?.message || 'Failed to create order');\n    }\n  }\n);\n\n// Отримання всіх замовлень користувача\nexport const getUserOrders = createAsyncThunk(\n  'orders/getUserOrders',\n  async (_, { rejectWithValue }) => {\n    try {\n      const { data } = await api.get('/orders/my-orders');\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.message || 'Failed to fetch orders');\n    }\n  }\n);\n\n// Отримання деталей замовлення\nexport const getOrderDetails = createAsyncThunk(\n  'orders/getOrderDetails',\n  async (orderId, { rejectWithValue }) => {\n    try {\n      const { data } = await api.get(`/api/orders/${orderId}`);\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.message || 'Failed to fetch order details');\n    }\n  }\n);\n\n// Оновлення статусу замовлення (для адміна)\nexport const updateOrderStatus = createAsyncThunk(\n  'orders/updateOrderStatus',\n  async ({ orderId, status }, { rejectWithValue }) => {\n    try {\n      const { data } = await api.put(`/orders/${orderId}/status`, { status });\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.message || 'Failed to update order status');\n    }\n  }\n);\n\nconst initialState = {\n  orders: [],\n  currentOrder: null,\n  loading: false,\n  error: null,\n  successMessage: null,\n};\n\nconst ordersSlice = createSlice({\n  name: 'orders',\n  initialState,\n  reducers: {\n    clearError: (state) => {\n      state.error = null;\n    },\n    clearSuccessMessage: (state) => {\n      state.successMessage = null;\n    },\n    clearCurrentOrder: (state) => {\n      state.currentOrder = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      // Create Order\n      .addCase(createOrder.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(createOrder.fulfilled, (state, action) => {\n        state.loading = false;\n        state.orders.unshift(action.payload);\n        state.currentOrder = action.payload;\n        state.successMessage = 'Order created successfully';\n      })\n      .addCase(createOrder.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n\n      // Get User Orders\n      .addCase(getUserOrders.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(getUserOrders.fulfilled, (state, action) => {\n        state.loading = false;\n        state.orders = action.payload;\n      })\n      .addCase(getUserOrders.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n\n      // Get Order Details\n      .addCase(getOrderDetails.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(getOrderDetails.fulfilled, (state, action) => {\n        state.loading = false;\n        state.currentOrder = action.payload;\n      })\n      .addCase(getOrderDetails.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n\n      // Update Order Status\n      .addCase(updateOrderStatus.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(updateOrderStatus.fulfilled, (state, action) => {\n        state.loading = false;\n        state.currentOrder = action.payload;\n        state.orders = state.orders.map((order) =>\n          order._id === action.payload._id ? action.payload : order\n        );\n        state.successMessage = 'Order status updated successfully';\n      })\n      .addCase(updateOrderStatus.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      });\n  },\n});\n\n// Селектори\nexport const selectAllOrders = (state) => state.orders.orders;\nexport const selectCurrentOrder = (state) => state.orders.currentOrder;\nexport const selectOrdersLoading = (state) => state.orders.loading;\nexport const selectOrdersError = (state) => state.orders.error;\nexport const selectOrdersSuccessMessage = (state) => state.orders.successMessage;\n\n// Actions\nexport const { clearError, clearSuccessMessage, clearCurrentOrder } = ordersSlice.actions;\n\nexport default ordersSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}