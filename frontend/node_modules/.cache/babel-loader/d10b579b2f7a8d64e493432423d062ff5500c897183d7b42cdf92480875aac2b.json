{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../utils/axios';\n\n// Додаткові константи\nexport const ORDER_STATUSES = {\n  PENDING: 'pending',\n  PROCESSING: 'processing',\n  SHIPPED: 'shipped',\n  DELIVERED: 'delivered',\n  CANCELLED: 'cancelled'\n};\n\n// Асинхронні actions\nexport const createOrder = createAsyncThunk('orders/createOrder', async (orderData, {\n  rejectWithValue\n}) => {\n  try {\n    console.log('Sending order data:', orderData);\n    const {\n      data\n    } = await api.post('/api/orders', orderData);\n    return data;\n  } catch (error) {\n    var _error$response, _error$response2, _error$response2$data;\n    console.error('Error creating order:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to create order');\n  }\n});\nexport const getUserOrders = createAsyncThunk('orders/getUserOrders', async ({\n  page = 1,\n  limit = 10,\n  status,\n  sortBy = 'createdAt'\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const params = new URLSearchParams({\n      page,\n      limit,\n      ...(status && {\n        status\n      }),\n      sortBy\n    });\n    const {\n      data\n    } = await api.get(`/api/orders/my-orders?${params}`);\n    return data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    return rejectWithValue(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch orders');\n  }\n});\nexport const getOrderDetails = createAsyncThunk('orders/getOrderDetails', async (orderId, {\n  rejectWithValue\n}) => {\n  try {\n    const {\n      data\n    } = await api.get(`/api/orders/${orderId}`);\n    return data;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    return rejectWithValue(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to fetch order details');\n  }\n});\nexport const updateOrderStatus = createAsyncThunk('orders/updateOrderStatus', async ({\n  orderId,\n  status\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const {\n      data\n    } = await api.put(`/api/orders/${orderId}/status`, {\n      status\n    });\n    return data;\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    return rejectWithValue(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to update order status');\n  }\n});\nexport const cancelOrder = createAsyncThunk('orders/cancelOrder', async (orderId, {\n  rejectWithValue\n}) => {\n  try {\n    const {\n      data\n    } = await api.put(`/api/orders/${orderId}/cancel`);\n    return data;\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    return rejectWithValue(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to cancel order');\n  }\n});\nexport const downloadInvoice = createAsyncThunk('orders/downloadInvoice', async (orderId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await api.get(`/api/orders/${orderId}/invoice`, {\n      responseType: 'blob'\n    });\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', `invoice-${orderId}.pdf`);\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n    return orderId;\n  } catch (error) {\n    var _error$response7, _error$response7$data;\n    return rejectWithValue(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to download invoice');\n  }\n});\nconst initialState = {\n  orders: [],\n  currentOrder: null,\n  loading: false,\n  error: null,\n  successMessage: null,\n  pagination: {\n    currentPage: 1,\n    totalPages: 1,\n    totalItems: 0,\n    limit: 10\n  },\n  filters: {\n    status: null,\n    sortBy: 'createdAt',\n    sortOrder: 'desc'\n  }\n};\nconst ordersSlice = createSlice({\n  name: 'orders',\n  initialState,\n  reducers: {\n    clearError: state => {\n      state.error = null;\n    },\n    clearSuccessMessage: state => {\n      state.successMessage = null;\n    },\n    clearCurrentOrder: state => {\n      state.currentOrder = null;\n    },\n    setFilters: (state, action) => {\n      state.filters = {\n        ...state.filters,\n        ...action.payload\n      };\n    },\n    resetFilters: state => {\n      state.filters = initialState.filters;\n    },\n    setPage: (state, action) => {\n      state.pagination.currentPage = action.payload;\n    },\n    sortOrders: (state, action) => {\n      const {\n        field,\n        direction\n      } = action.payload;\n      state.filters.sortBy = field;\n      state.filters.sortOrder = direction;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Create Order\n    .addCase(createOrder.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(createOrder.fulfilled, (state, action) => {\n      state.loading = false;\n      state.orders.unshift(action.payload);\n      state.currentOrder = action.payload;\n      state.successMessage = 'Order created successfully';\n    }).addCase(createOrder.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n    // Get User Orders\n    .addCase(getUserOrders.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(getUserOrders.fulfilled, (state, action) => {\n      state.loading = false;\n      state.orders = action.payload.orders;\n      state.pagination = {\n        currentPage: action.payload.currentPage,\n        totalPages: action.payload.totalPages,\n        totalItems: action.payload.totalItems,\n        limit: action.payload.limit\n      };\n    }).addCase(getUserOrders.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n    // Get Order Details\n    .addCase(getOrderDetails.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(getOrderDetails.fulfilled, (state, action) => {\n      state.loading = false;\n      state.currentOrder = action.payload;\n    }).addCase(getOrderDetails.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n    // Update Order Status\n    .addCase(updateOrderStatus.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(updateOrderStatus.fulfilled, (state, action) => {\n      state.loading = false;\n      state.currentOrder = action.payload;\n      state.orders = state.orders.map(order => order._id === action.payload._id ? action.payload : order);\n      state.successMessage = 'Order status updated successfully';\n    }).addCase(updateOrderStatus.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n    // Cancel Order\n    .addCase(cancelOrder.fulfilled, (state, action) => {\n      state.loading = false;\n      const updatedOrder = action.payload;\n      state.orders = state.orders.map(order => order._id === updatedOrder._id ? updatedOrder : order);\n      state.successMessage = 'Order cancelled successfully';\n    })\n    // Download Invoice\n    .addCase(downloadInvoice.fulfilled, state => {\n      state.successMessage = 'Invoice downloaded successfully';\n    });\n  }\n});\n\n// Додаткові селектори\nexport const selectOrderById = (state, orderId) => state.orders.orders.find(order => order._id === orderId);\nexport const selectOrdersByStatus = (state, status) => state.orders.orders.filter(order => order.status === status);\nexport const selectOrdersStats = state => {\n  const orders = state.orders.orders;\n  return {\n    total: orders.length,\n    totalAmount: orders.reduce((sum, order) => sum + order.totalAmount, 0),\n    byStatus: orders.reduce((acc, order) => {\n      acc[order.status] = (acc[order.status] || 0) + 1;\n      return acc;\n    }, {})\n  };\n};\nexport const selectPagination = state => state.orders.pagination;\nexport const selectFilters = state => state.orders.filters;\n\n// Базові селектори\nexport const {\n  clearError,\n  clearSuccessMessage,\n  clearCurrentOrder,\n  setFilters,\n  resetFilters,\n  setPage,\n  sortOrders\n} = ordersSlice.actions;\nexport const selectAllOrders = state => state.orders.orders;\nexport const selectCurrentOrder = state => state.orders.currentOrder;\nexport const selectOrdersLoading = state => state.orders.loading;\nexport const selectOrdersError = state => state.orders.error;\nexport const selectOrdersSuccessMessage = state => state.orders.successMessage;\nexport default ordersSlice.reducer;\n\n// // src/store/slices/ordersSlice.js\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import api from '../../utils/axios';\n\n// // export const selectCurrentOrder = (state) => state.orders.currentOrder;\n\n// // Створення замовлення\n// export const createOrder = createAsyncThunk(\n//   'orders/createOrder',\n//   async (orderData, { rejectWithValue }) => {\n//     try {\n//       console.log('Sending order data:', orderData); // Для відладки\n//       const { data } = await api.post('/api/orders', orderData);\n//       return data;\n//     } catch (error) {\n//       console.error('Error creating order:', error.response?.data); // Для відладки\n//       return rejectWithValue(error.response?.data?.message || 'Failed to create order');\n//     }\n//   }\n// );\n\n// // Отримання всіх замовлень користувача\n// export const getUserOrders = createAsyncThunk(\n//   'orders/getUserOrders',\n//   async (_, { rejectWithValue }) => {\n//     try {\n//       const { data } = await api.get('/api/orders/my-orders');\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.response?.data?.message || 'Failed to fetch orders');\n//     }\n//   }\n// );\n\n// // Отримання деталей замовлення\n// export const getOrderDetails = createAsyncThunk(\n//   'orders/getOrderDetails',\n//   async (orderId, { rejectWithValue }) => {\n//     try {\n//       const { data } = await api.get(`/api/orders/${orderId}`);\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.response?.data?.message || 'Failed to fetch order details');\n//     }\n//   }\n// );\n\n// // Оновлення статусу замовлення (для адміна)\n// export const updateOrderStatus = createAsyncThunk(\n//   'orders/updateOrderStatus',\n//   async ({ orderId, status }, { rejectWithValue }) => {\n//     try {\n//       const { data } = await api.put(`/api/orders/${orderId}/status`, { status });\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.response?.data?.message || 'Failed to update order status');\n//     }\n//   }\n// );\n\n// const initialState = {\n//   orders: [],\n//   currentOrder: null,\n//   loading: false,\n//   error: null,\n//   successMessage: null,\n// };\n\n// const ordersSlice = createSlice({\n//   name: 'orders',\n//   initialState,\n//   reducers: {\n//     clearError: (state) => {\n//       state.error = null;\n//     },\n//     clearSuccessMessage: (state) => {\n//       state.successMessage = null;\n//     },\n//     clearCurrentOrder: (state) => {\n//       state.currentOrder = null;\n//     },\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       // Create Order\n//       .addCase(createOrder.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(createOrder.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.orders.unshift(action.payload);\n//         state.currentOrder = action.payload;\n//         state.successMessage = 'Order created successfully';\n//       })\n//       .addCase(createOrder.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       })\n\n//       // Get User Orders\n//       .addCase(getUserOrders.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(getUserOrders.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.orders = action.payload;\n//       })\n//       .addCase(getUserOrders.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       })\n\n//       // Get Order Details\n//       .addCase(getOrderDetails.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(getOrderDetails.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.currentOrder = action.payload;\n//       })\n//       .addCase(getOrderDetails.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       })\n\n//       // Update Order Status\n//       .addCase(updateOrderStatus.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(updateOrderStatus.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.currentOrder = action.payload;\n//         state.orders = state.orders.map((order) =>\n//           order._id === action.payload._id ? action.payload : order\n//         );\n//         state.successMessage = 'Order status updated successfully';\n//       })\n//       .addCase(updateOrderStatus.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       });\n//   },\n// });\n\n// // Селектори\n// export const selectAllOrders = (state) => state.orders.orders;\n// export const selectCurrentOrder = (state) => state.orders.currentOrder;\n// export const selectOrdersLoading = (state) => state.orders.loading;\n// export const selectOrdersError = (state) => state.orders.error;\n// export const selectOrdersSuccessMessage = (state) => state.orders.successMessage;\n\n// // Actions\n// export const { clearError, clearSuccessMessage, clearCurrentOrder } = ordersSlice.actions;\n\n// export default ordersSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","ORDER_STATUSES","PENDING","PROCESSING","SHIPPED","DELIVERED","CANCELLED","createOrder","orderData","rejectWithValue","console","log","data","post","error","_error$response","_error$response2","_error$response2$data","response","message","getUserOrders","page","limit","status","sortBy","params","URLSearchParams","get","_error$response3","_error$response3$data","getOrderDetails","orderId","_error$response4","_error$response4$data","updateOrderStatus","put","_error$response5","_error$response5$data","cancelOrder","_error$response6","_error$response6$data","downloadInvoice","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","remove","_error$response7","_error$response7$data","initialState","orders","currentOrder","loading","successMessage","pagination","currentPage","totalPages","totalItems","filters","sortOrder","ordersSlice","name","reducers","clearError","state","clearSuccessMessage","clearCurrentOrder","setFilters","action","payload","resetFilters","setPage","sortOrders","field","direction","extraReducers","builder","addCase","pending","fulfilled","unshift","rejected","map","order","_id","updatedOrder","selectOrderById","find","selectOrdersByStatus","filter","selectOrdersStats","total","length","totalAmount","reduce","sum","byStatus","acc","selectPagination","selectFilters","actions","selectAllOrders","selectCurrentOrder","selectOrdersLoading","selectOrdersError","selectOrdersSuccessMessage","reducer"],"sources":["/Users/serhii_bondariev/Documents/GitHub/PowerTools/frontend/src/store/slices/ordersSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../utils/axios';\n\n// Додаткові константи\nexport const ORDER_STATUSES = {\n  PENDING: 'pending',\n  PROCESSING: 'processing',\n  SHIPPED: 'shipped',\n  DELIVERED: 'delivered',\n  CANCELLED: 'cancelled',\n};\n\n// Асинхронні actions\nexport const createOrder = createAsyncThunk(\n  'orders/createOrder',\n  async (orderData, { rejectWithValue }) => {\n    try {\n      console.log('Sending order data:', orderData);\n      const { data } = await api.post('/api/orders', orderData);\n      return data;\n    } catch (error) {\n      console.error('Error creating order:', error.response?.data);\n      return rejectWithValue(error.response?.data?.message || 'Failed to create order');\n    }\n  }\n);\n\nexport const getUserOrders = createAsyncThunk(\n  'orders/getUserOrders',\n  async ({ page = 1, limit = 10, status, sortBy = 'createdAt' }, { rejectWithValue }) => {\n    try {\n      const params = new URLSearchParams({\n        page,\n        limit,\n        ...(status && { status }),\n        sortBy,\n      });\n      const { data } = await api.get(`/api/orders/my-orders?${params}`);\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.message || 'Failed to fetch orders');\n    }\n  }\n);\n\nexport const getOrderDetails = createAsyncThunk(\n  'orders/getOrderDetails',\n  async (orderId, { rejectWithValue }) => {\n    try {\n      const { data } = await api.get(`/api/orders/${orderId}`);\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.message || 'Failed to fetch order details');\n    }\n  }\n);\n\nexport const updateOrderStatus = createAsyncThunk(\n  'orders/updateOrderStatus',\n  async ({ orderId, status }, { rejectWithValue }) => {\n    try {\n      const { data } = await api.put(`/api/orders/${orderId}/status`, { status });\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.message || 'Failed to update order status');\n    }\n  }\n);\n\nexport const cancelOrder = createAsyncThunk(\n  'orders/cancelOrder',\n  async (orderId, { rejectWithValue }) => {\n    try {\n      const { data } = await api.put(`/api/orders/${orderId}/cancel`);\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.message || 'Failed to cancel order');\n    }\n  }\n);\n\nexport const downloadInvoice = createAsyncThunk(\n  'orders/downloadInvoice',\n  async (orderId, { rejectWithValue }) => {\n    try {\n      const response = await api.get(`/api/orders/${orderId}/invoice`, {\n        responseType: 'blob',\n      });\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `invoice-${orderId}.pdf`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      return orderId;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.message || 'Failed to download invoice');\n    }\n  }\n);\n\nconst initialState = {\n  orders: [],\n  currentOrder: null,\n  loading: false,\n  error: null,\n  successMessage: null,\n  pagination: {\n    currentPage: 1,\n    totalPages: 1,\n    totalItems: 0,\n    limit: 10,\n  },\n  filters: {\n    status: null,\n    sortBy: 'createdAt',\n    sortOrder: 'desc',\n  },\n};\n\nconst ordersSlice = createSlice({\n  name: 'orders',\n  initialState,\n  reducers: {\n    clearError: (state) => {\n      state.error = null;\n    },\n    clearSuccessMessage: (state) => {\n      state.successMessage = null;\n    },\n    clearCurrentOrder: (state) => {\n      state.currentOrder = null;\n    },\n    setFilters: (state, action) => {\n      state.filters = { ...state.filters, ...action.payload };\n    },\n    resetFilters: (state) => {\n      state.filters = initialState.filters;\n    },\n    setPage: (state, action) => {\n      state.pagination.currentPage = action.payload;\n    },\n    sortOrders: (state, action) => {\n      const { field, direction } = action.payload;\n      state.filters.sortBy = field;\n      state.filters.sortOrder = direction;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      // Create Order\n      .addCase(createOrder.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(createOrder.fulfilled, (state, action) => {\n        state.loading = false;\n        state.orders.unshift(action.payload);\n        state.currentOrder = action.payload;\n        state.successMessage = 'Order created successfully';\n      })\n      .addCase(createOrder.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      // Get User Orders\n      .addCase(getUserOrders.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(getUserOrders.fulfilled, (state, action) => {\n        state.loading = false;\n        state.orders = action.payload.orders;\n        state.pagination = {\n          currentPage: action.payload.currentPage,\n          totalPages: action.payload.totalPages,\n          totalItems: action.payload.totalItems,\n          limit: action.payload.limit,\n        };\n      })\n      .addCase(getUserOrders.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      // Get Order Details\n      .addCase(getOrderDetails.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(getOrderDetails.fulfilled, (state, action) => {\n        state.loading = false;\n        state.currentOrder = action.payload;\n      })\n      .addCase(getOrderDetails.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      // Update Order Status\n      .addCase(updateOrderStatus.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(updateOrderStatus.fulfilled, (state, action) => {\n        state.loading = false;\n        state.currentOrder = action.payload;\n        state.orders = state.orders.map((order) =>\n          order._id === action.payload._id ? action.payload : order\n        );\n        state.successMessage = 'Order status updated successfully';\n      })\n      .addCase(updateOrderStatus.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      // Cancel Order\n      .addCase(cancelOrder.fulfilled, (state, action) => {\n        state.loading = false;\n        const updatedOrder = action.payload;\n        state.orders = state.orders.map((order) =>\n          order._id === updatedOrder._id ? updatedOrder : order\n        );\n        state.successMessage = 'Order cancelled successfully';\n      })\n      // Download Invoice\n      .addCase(downloadInvoice.fulfilled, (state) => {\n        state.successMessage = 'Invoice downloaded successfully';\n      });\n  },\n});\n\n// Додаткові селектори\nexport const selectOrderById = (state, orderId) =>\n  state.orders.orders.find((order) => order._id === orderId);\n\nexport const selectOrdersByStatus = (state, status) =>\n  state.orders.orders.filter((order) => order.status === status);\n\nexport const selectOrdersStats = (state) => {\n  const orders = state.orders.orders;\n  return {\n    total: orders.length,\n    totalAmount: orders.reduce((sum, order) => sum + order.totalAmount, 0),\n    byStatus: orders.reduce((acc, order) => {\n      acc[order.status] = (acc[order.status] || 0) + 1;\n      return acc;\n    }, {}),\n  };\n};\n\nexport const selectPagination = (state) => state.orders.pagination;\nexport const selectFilters = (state) => state.orders.filters;\n\n// Базові селектори\nexport const {\n  clearError,\n  clearSuccessMessage,\n  clearCurrentOrder,\n  setFilters,\n  resetFilters,\n  setPage,\n  sortOrders,\n} = ordersSlice.actions;\n\nexport const selectAllOrders = (state) => state.orders.orders;\nexport const selectCurrentOrder = (state) => state.orders.currentOrder;\nexport const selectOrdersLoading = (state) => state.orders.loading;\nexport const selectOrdersError = (state) => state.orders.error;\nexport const selectOrdersSuccessMessage = (state) => state.orders.successMessage;\n\nexport default ordersSlice.reducer;\n\n// // src/store/slices/ordersSlice.js\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import api from '../../utils/axios';\n\n// // export const selectCurrentOrder = (state) => state.orders.currentOrder;\n\n// // Створення замовлення\n// export const createOrder = createAsyncThunk(\n//   'orders/createOrder',\n//   async (orderData, { rejectWithValue }) => {\n//     try {\n//       console.log('Sending order data:', orderData); // Для відладки\n//       const { data } = await api.post('/api/orders', orderData);\n//       return data;\n//     } catch (error) {\n//       console.error('Error creating order:', error.response?.data); // Для відладки\n//       return rejectWithValue(error.response?.data?.message || 'Failed to create order');\n//     }\n//   }\n// );\n\n// // Отримання всіх замовлень користувача\n// export const getUserOrders = createAsyncThunk(\n//   'orders/getUserOrders',\n//   async (_, { rejectWithValue }) => {\n//     try {\n//       const { data } = await api.get('/api/orders/my-orders');\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.response?.data?.message || 'Failed to fetch orders');\n//     }\n//   }\n// );\n\n// // Отримання деталей замовлення\n// export const getOrderDetails = createAsyncThunk(\n//   'orders/getOrderDetails',\n//   async (orderId, { rejectWithValue }) => {\n//     try {\n//       const { data } = await api.get(`/api/orders/${orderId}`);\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.response?.data?.message || 'Failed to fetch order details');\n//     }\n//   }\n// );\n\n// // Оновлення статусу замовлення (для адміна)\n// export const updateOrderStatus = createAsyncThunk(\n//   'orders/updateOrderStatus',\n//   async ({ orderId, status }, { rejectWithValue }) => {\n//     try {\n//       const { data } = await api.put(`/api/orders/${orderId}/status`, { status });\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.response?.data?.message || 'Failed to update order status');\n//     }\n//   }\n// );\n\n// const initialState = {\n//   orders: [],\n//   currentOrder: null,\n//   loading: false,\n//   error: null,\n//   successMessage: null,\n// };\n\n// const ordersSlice = createSlice({\n//   name: 'orders',\n//   initialState,\n//   reducers: {\n//     clearError: (state) => {\n//       state.error = null;\n//     },\n//     clearSuccessMessage: (state) => {\n//       state.successMessage = null;\n//     },\n//     clearCurrentOrder: (state) => {\n//       state.currentOrder = null;\n//     },\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       // Create Order\n//       .addCase(createOrder.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(createOrder.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.orders.unshift(action.payload);\n//         state.currentOrder = action.payload;\n//         state.successMessage = 'Order created successfully';\n//       })\n//       .addCase(createOrder.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       })\n\n//       // Get User Orders\n//       .addCase(getUserOrders.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(getUserOrders.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.orders = action.payload;\n//       })\n//       .addCase(getUserOrders.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       })\n\n//       // Get Order Details\n//       .addCase(getOrderDetails.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(getOrderDetails.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.currentOrder = action.payload;\n//       })\n//       .addCase(getOrderDetails.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       })\n\n//       // Update Order Status\n//       .addCase(updateOrderStatus.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(updateOrderStatus.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.currentOrder = action.payload;\n//         state.orders = state.orders.map((order) =>\n//           order._id === action.payload._id ? action.payload : order\n//         );\n//         state.successMessage = 'Order status updated successfully';\n//       })\n//       .addCase(updateOrderStatus.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       });\n//   },\n// });\n\n// // Селектори\n// export const selectAllOrders = (state) => state.orders.orders;\n// export const selectCurrentOrder = (state) => state.orders.currentOrder;\n// export const selectOrdersLoading = (state) => state.orders.loading;\n// export const selectOrdersError = (state) => state.orders.error;\n// export const selectOrdersSuccessMessage = (state) => state.orders.successMessage;\n\n// // Actions\n// export const { clearError, clearSuccessMessage, clearCurrentOrder } = ordersSlice.actions;\n\n// export default ordersSlice.reducer;\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}