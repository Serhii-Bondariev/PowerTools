{"ast":null,"code":"// src/store/slices/ordersSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../utils/axios';\n\n// Створення замовлення\nexport const createOrder = createAsyncThunk('orders/createOrder', async (orderData, {\n  rejectWithValue\n}) => {\n  try {\n    console.log('Sending order data:', orderData);\n    const {\n      data\n    } = await api.post('/api/orders', orderData);\n    return data;\n  } catch (error) {\n    var _error$response, _error$response2, _error$response2$data;\n    console.error('Error creating order:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to create order');\n  }\n});\n\n// Отримання всіх замовлень користувача\nexport const getUserOrders = createAsyncThunk('orders/getUserOrders', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const {\n      data\n    } = await api.get('/api/orders/my-orders');\n    return data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    return rejectWithValue(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch orders');\n  }\n});\n\n// Отримання деталей замовлення\nexport const getOrderDetails = createAsyncThunk('orders/getOrderDetails', async (orderId, {\n  rejectWithValue\n}) => {\n  try {\n    const {\n      data\n    } = await api.get(`/api/orders/${orderId}`);\n    return data;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    return rejectWithValue(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to fetch order details');\n  }\n});\n\n// Оновлення статусу замовлення (для адміна)\nexport const updateOrderStatus = createAsyncThunk('orders/updateOrderStatus', async ({\n  orderId,\n  status\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const {\n      data\n    } = await api.put(`/api/orders/${orderId}/status`, {\n      status\n    });\n    return data;\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    return rejectWithValue(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to update order status');\n  }\n});\n\n// Нові функції\nexport const cancelOrder = createAsyncThunk('orders/cancelOrder', async (orderId, {\n  rejectWithValue\n}) => {\n  try {\n    const {\n      data\n    } = await api.put(`/api/orders/${orderId}/cancel`);\n    return data;\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    return rejectWithValue(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to cancel order');\n  }\n});\nexport const downloadInvoice = createAsyncThunk('orders/downloadInvoice', async (orderId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await api.get(`/api/orders/${orderId}/invoice`, {\n      responseType: 'blob'\n    });\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', `invoice-${orderId}.pdf`);\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n    return orderId;\n  } catch (error) {\n    var _error$response7, _error$response7$data;\n    return rejectWithValue(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to download invoice');\n  }\n});\nconst initialState = {\n  orders: [],\n  currentOrder: null,\n  loading: false,\n  error: null,\n  successMessage: null\n};\nconst ordersSlice = createSlice({\n  name: 'orders',\n  initialState,\n  reducers: {\n    clearError: state => {\n      state.error = null;\n    },\n    clearSuccessMessage: state => {\n      state.successMessage = null;\n    },\n    clearCurrentOrder: state => {\n      state.currentOrder = null;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Create Order\n    .addCase(createOrder.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(createOrder.fulfilled, (state, action) => {\n      state.loading = false;\n      state.orders.unshift(action.payload);\n      state.currentOrder = action.payload;\n      state.successMessage = 'Order created successfully';\n    }).addCase(createOrder.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n    // Get User Orders\n    .addCase(getUserOrders.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(getUserOrders.fulfilled, (state, action) => {\n      state.loading = false;\n      state.orders = action.payload;\n    }).addCase(getUserOrders.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n    // Get Order Details\n    .addCase(getOrderDetails.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(getOrderDetails.fulfilled, (state, action) => {\n      state.loading = false;\n      state.currentOrder = action.payload;\n    }).addCase(getOrderDetails.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n    // Update Order Status\n    .addCase(updateOrderStatus.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(updateOrderStatus.fulfilled, (state, action) => {\n      state.loading = false;\n      state.currentOrder = action.payload;\n      state.orders = state.orders.map(order => order._id === action.payload._id ? action.payload : order);\n      state.successMessage = 'Order status updated successfully';\n    }).addCase(updateOrderStatus.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n    // Нові обробники\n    .addCase(cancelOrder.fulfilled, (state, action) => {\n      const updatedOrder = action.payload;\n      state.orders = state.orders.map(order => order._id === updatedOrder._id ? updatedOrder : order);\n      state.successMessage = 'Order cancelled successfully';\n    }).addCase(downloadInvoice.fulfilled, state => {\n      state.successMessage = 'Invoice downloaded successfully';\n    });\n  }\n});\n\n// Додаткові селектори\nexport const selectOrderById = (state, orderId) => state.orders.orders.find(order => order._id === orderId);\nexport const selectOrdersByStatus = (state, status) => state.orders.orders.filter(order => order.status === status);\nexport const selectOrdersStats = state => {\n  const orders = state.orders.orders;\n  return {\n    total: orders.length,\n    totalAmount: orders.reduce((sum, order) => sum + order.totalAmount, 0),\n    byStatus: orders.reduce((acc, order) => {\n      acc[order.status] = (acc[order.status] || 0) + 1;\n      return acc;\n    }, {})\n  };\n};\n\n// Базові селектори\nexport const selectAllOrders = state => state.orders.orders;\nexport const selectCurrentOrder = state => state.orders.currentOrder;\nexport const selectOrdersLoading = state => state.orders.loading;\nexport const selectOrdersError = state => state.orders.error;\nexport const selectOrdersSuccessMessage = state => state.orders.successMessage;\nexport const {\n  clearError,\n  clearSuccessMessage,\n  clearCurrentOrder\n} = ordersSlice.actions;\nexport default ordersSlice.reducer;\n// // src/store/slices/ordersSlice.js\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import api from '../../utils/axios';\n\n// // export const selectCurrentOrder = (state) => state.orders.currentOrder;\n\n// // Створення замовлення\n// export const createOrder = createAsyncThunk(\n//   'orders/createOrder',\n//   async (orderData, { rejectWithValue }) => {\n//     try {\n//       console.log('Sending order data:', orderData); // Для відладки\n//       const { data } = await api.post('/api/orders', orderData);\n//       return data;\n//     } catch (error) {\n//       console.error('Error creating order:', error.response?.data); // Для відладки\n//       return rejectWithValue(error.response?.data?.message || 'Failed to create order');\n//     }\n//   }\n// );\n\n// // Отримання всіх замовлень користувача\n// export const getUserOrders = createAsyncThunk(\n//   'orders/getUserOrders',\n//   async (_, { rejectWithValue }) => {\n//     try {\n//       const { data } = await api.get('/api/orders/my-orders');\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.response?.data?.message || 'Failed to fetch orders');\n//     }\n//   }\n// );\n\n// // Отримання деталей замовлення\n// export const getOrderDetails = createAsyncThunk(\n//   'orders/getOrderDetails',\n//   async (orderId, { rejectWithValue }) => {\n//     try {\n//       const { data } = await api.get(`/api/orders/${orderId}`);\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.response?.data?.message || 'Failed to fetch order details');\n//     }\n//   }\n// );\n\n// // Оновлення статусу замовлення (для адміна)\n// export const updateOrderStatus = createAsyncThunk(\n//   'orders/updateOrderStatus',\n//   async ({ orderId, status }, { rejectWithValue }) => {\n//     try {\n//       const { data } = await api.put(`/api/orders/${orderId}/status`, { status });\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.response?.data?.message || 'Failed to update order status');\n//     }\n//   }\n// );\n\n// const initialState = {\n//   orders: [],\n//   currentOrder: null,\n//   loading: false,\n//   error: null,\n//   successMessage: null,\n// };\n\n// const ordersSlice = createSlice({\n//   name: 'orders',\n//   initialState,\n//   reducers: {\n//     clearError: (state) => {\n//       state.error = null;\n//     },\n//     clearSuccessMessage: (state) => {\n//       state.successMessage = null;\n//     },\n//     clearCurrentOrder: (state) => {\n//       state.currentOrder = null;\n//     },\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       // Create Order\n//       .addCase(createOrder.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(createOrder.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.orders.unshift(action.payload);\n//         state.currentOrder = action.payload;\n//         state.successMessage = 'Order created successfully';\n//       })\n//       .addCase(createOrder.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       })\n\n//       // Get User Orders\n//       .addCase(getUserOrders.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(getUserOrders.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.orders = action.payload;\n//       })\n//       .addCase(getUserOrders.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       })\n\n//       // Get Order Details\n//       .addCase(getOrderDetails.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(getOrderDetails.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.currentOrder = action.payload;\n//       })\n//       .addCase(getOrderDetails.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       })\n\n//       // Update Order Status\n//       .addCase(updateOrderStatus.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(updateOrderStatus.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.currentOrder = action.payload;\n//         state.orders = state.orders.map((order) =>\n//           order._id === action.payload._id ? action.payload : order\n//         );\n//         state.successMessage = 'Order status updated successfully';\n//       })\n//       .addCase(updateOrderStatus.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       });\n//   },\n// });\n\n// // Селектори\n// export const selectAllOrders = (state) => state.orders.orders;\n// export const selectCurrentOrder = (state) => state.orders.currentOrder;\n// export const selectOrdersLoading = (state) => state.orders.loading;\n// export const selectOrdersError = (state) => state.orders.error;\n// export const selectOrdersSuccessMessage = (state) => state.orders.successMessage;\n\n// // Actions\n// export const { clearError, clearSuccessMessage, clearCurrentOrder } = ordersSlice.actions;\n\n// export default ordersSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","createOrder","orderData","rejectWithValue","console","log","data","post","error","_error$response","_error$response2","_error$response2$data","response","message","getUserOrders","_","get","_error$response3","_error$response3$data","getOrderDetails","orderId","_error$response4","_error$response4$data","updateOrderStatus","status","put","_error$response5","_error$response5$data","cancelOrder","_error$response6","_error$response6$data","downloadInvoice","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","remove","_error$response7","_error$response7$data","initialState","orders","currentOrder","loading","successMessage","ordersSlice","name","reducers","clearError","state","clearSuccessMessage","clearCurrentOrder","extraReducers","builder","addCase","pending","fulfilled","action","unshift","payload","rejected","map","order","_id","updatedOrder","selectOrderById","find","selectOrdersByStatus","filter","selectOrdersStats","total","length","totalAmount","reduce","sum","byStatus","acc","selectAllOrders","selectCurrentOrder","selectOrdersLoading","selectOrdersError","selectOrdersSuccessMessage","actions","reducer"],"sources":["/Users/serhii_bondariev/Documents/GitHub/PowerTools/frontend/src/store/slices/ordersSlice.js"],"sourcesContent":["// src/store/slices/ordersSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../utils/axios';\n\n// Створення замовлення\nexport const createOrder = createAsyncThunk(\n  'orders/createOrder',\n  async (orderData, { rejectWithValue }) => {\n    try {\n      console.log('Sending order data:', orderData);\n      const { data } = await api.post('/api/orders', orderData);\n      return data;\n    } catch (error) {\n      console.error('Error creating order:', error.response?.data);\n      return rejectWithValue(error.response?.data?.message || 'Failed to create order');\n    }\n  }\n);\n\n// Отримання всіх замовлень користувача\nexport const getUserOrders = createAsyncThunk(\n  'orders/getUserOrders',\n  async (_, { rejectWithValue }) => {\n    try {\n      const { data } = await api.get('/api/orders/my-orders');\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.message || 'Failed to fetch orders');\n    }\n  }\n);\n\n// Отримання деталей замовлення\nexport const getOrderDetails = createAsyncThunk(\n  'orders/getOrderDetails',\n  async (orderId, { rejectWithValue }) => {\n    try {\n      const { data } = await api.get(`/api/orders/${orderId}`);\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.message || 'Failed to fetch order details');\n    }\n  }\n);\n\n// Оновлення статусу замовлення (для адміна)\nexport const updateOrderStatus = createAsyncThunk(\n  'orders/updateOrderStatus',\n  async ({ orderId, status }, { rejectWithValue }) => {\n    try {\n      const { data } = await api.put(`/api/orders/${orderId}/status`, { status });\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.message || 'Failed to update order status');\n    }\n  }\n);\n\n// Нові функції\nexport const cancelOrder = createAsyncThunk(\n  'orders/cancelOrder',\n  async (orderId, { rejectWithValue }) => {\n    try {\n      const { data } = await api.put(`/api/orders/${orderId}/cancel`);\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.message || 'Failed to cancel order');\n    }\n  }\n);\n\nexport const downloadInvoice = createAsyncThunk(\n  'orders/downloadInvoice',\n  async (orderId, { rejectWithValue }) => {\n    try {\n      const response = await api.get(`/api/orders/${orderId}/invoice`, {\n        responseType: 'blob',\n      });\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `invoice-${orderId}.pdf`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      return orderId;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.message || 'Failed to download invoice');\n    }\n  }\n);\n\nconst initialState = {\n  orders: [],\n  currentOrder: null,\n  loading: false,\n  error: null,\n  successMessage: null,\n};\n\nconst ordersSlice = createSlice({\n  name: 'orders',\n  initialState,\n  reducers: {\n    clearError: (state) => {\n      state.error = null;\n    },\n    clearSuccessMessage: (state) => {\n      state.successMessage = null;\n    },\n    clearCurrentOrder: (state) => {\n      state.currentOrder = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      // Create Order\n      .addCase(createOrder.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(createOrder.fulfilled, (state, action) => {\n        state.loading = false;\n        state.orders.unshift(action.payload);\n        state.currentOrder = action.payload;\n        state.successMessage = 'Order created successfully';\n      })\n      .addCase(createOrder.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      // Get User Orders\n      .addCase(getUserOrders.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(getUserOrders.fulfilled, (state, action) => {\n        state.loading = false;\n        state.orders = action.payload;\n      })\n      .addCase(getUserOrders.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      // Get Order Details\n      .addCase(getOrderDetails.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(getOrderDetails.fulfilled, (state, action) => {\n        state.loading = false;\n        state.currentOrder = action.payload;\n      })\n      .addCase(getOrderDetails.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      // Update Order Status\n      .addCase(updateOrderStatus.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(updateOrderStatus.fulfilled, (state, action) => {\n        state.loading = false;\n        state.currentOrder = action.payload;\n        state.orders = state.orders.map((order) =>\n          order._id === action.payload._id ? action.payload : order\n        );\n        state.successMessage = 'Order status updated successfully';\n      })\n      .addCase(updateOrderStatus.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      // Нові обробники\n      .addCase(cancelOrder.fulfilled, (state, action) => {\n        const updatedOrder = action.payload;\n        state.orders = state.orders.map((order) =>\n          order._id === updatedOrder._id ? updatedOrder : order\n        );\n        state.successMessage = 'Order cancelled successfully';\n      })\n      .addCase(downloadInvoice.fulfilled, (state) => {\n        state.successMessage = 'Invoice downloaded successfully';\n      });\n  },\n});\n\n// Додаткові селектори\nexport const selectOrderById = (state, orderId) =>\n  state.orders.orders.find((order) => order._id === orderId);\n\nexport const selectOrdersByStatus = (state, status) =>\n  state.orders.orders.filter((order) => order.status === status);\n\nexport const selectOrdersStats = (state) => {\n  const orders = state.orders.orders;\n  return {\n    total: orders.length,\n    totalAmount: orders.reduce((sum, order) => sum + order.totalAmount, 0),\n    byStatus: orders.reduce((acc, order) => {\n      acc[order.status] = (acc[order.status] || 0) + 1;\n      return acc;\n    }, {}),\n  };\n};\n\n// Базові селектори\nexport const selectAllOrders = (state) => state.orders.orders;\nexport const selectCurrentOrder = (state) => state.orders.currentOrder;\nexport const selectOrdersLoading = (state) => state.orders.loading;\nexport const selectOrdersError = (state) => state.orders.error;\nexport const selectOrdersSuccessMessage = (state) => state.orders.successMessage;\n\nexport const { clearError, clearSuccessMessage, clearCurrentOrder } = ordersSlice.actions;\n\nexport default ordersSlice.reducer;\n// // src/store/slices/ordersSlice.js\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import api from '../../utils/axios';\n\n// // export const selectCurrentOrder = (state) => state.orders.currentOrder;\n\n// // Створення замовлення\n// export const createOrder = createAsyncThunk(\n//   'orders/createOrder',\n//   async (orderData, { rejectWithValue }) => {\n//     try {\n//       console.log('Sending order data:', orderData); // Для відладки\n//       const { data } = await api.post('/api/orders', orderData);\n//       return data;\n//     } catch (error) {\n//       console.error('Error creating order:', error.response?.data); // Для відладки\n//       return rejectWithValue(error.response?.data?.message || 'Failed to create order');\n//     }\n//   }\n// );\n\n// // Отримання всіх замовлень користувача\n// export const getUserOrders = createAsyncThunk(\n//   'orders/getUserOrders',\n//   async (_, { rejectWithValue }) => {\n//     try {\n//       const { data } = await api.get('/api/orders/my-orders');\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.response?.data?.message || 'Failed to fetch orders');\n//     }\n//   }\n// );\n\n// // Отримання деталей замовлення\n// export const getOrderDetails = createAsyncThunk(\n//   'orders/getOrderDetails',\n//   async (orderId, { rejectWithValue }) => {\n//     try {\n//       const { data } = await api.get(`/api/orders/${orderId}`);\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.response?.data?.message || 'Failed to fetch order details');\n//     }\n//   }\n// );\n\n// // Оновлення статусу замовлення (для адміна)\n// export const updateOrderStatus = createAsyncThunk(\n//   'orders/updateOrderStatus',\n//   async ({ orderId, status }, { rejectWithValue }) => {\n//     try {\n//       const { data } = await api.put(`/api/orders/${orderId}/status`, { status });\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.response?.data?.message || 'Failed to update order status');\n//     }\n//   }\n// );\n\n// const initialState = {\n//   orders: [],\n//   currentOrder: null,\n//   loading: false,\n//   error: null,\n//   successMessage: null,\n// };\n\n// const ordersSlice = createSlice({\n//   name: 'orders',\n//   initialState,\n//   reducers: {\n//     clearError: (state) => {\n//       state.error = null;\n//     },\n//     clearSuccessMessage: (state) => {\n//       state.successMessage = null;\n//     },\n//     clearCurrentOrder: (state) => {\n//       state.currentOrder = null;\n//     },\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       // Create Order\n//       .addCase(createOrder.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(createOrder.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.orders.unshift(action.payload);\n//         state.currentOrder = action.payload;\n//         state.successMessage = 'Order created successfully';\n//       })\n//       .addCase(createOrder.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       })\n\n//       // Get User Orders\n//       .addCase(getUserOrders.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(getUserOrders.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.orders = action.payload;\n//       })\n//       .addCase(getUserOrders.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       })\n\n//       // Get Order Details\n//       .addCase(getOrderDetails.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(getOrderDetails.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.currentOrder = action.payload;\n//       })\n//       .addCase(getOrderDetails.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       })\n\n//       // Update Order Status\n//       .addCase(updateOrderStatus.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(updateOrderStatus.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.currentOrder = action.payload;\n//         state.orders = state.orders.map((order) =>\n//           order._id === action.payload._id ? action.payload : order\n//         );\n//         state.successMessage = 'Order status updated successfully';\n//       })\n//       .addCase(updateOrderStatus.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       });\n//   },\n// });\n\n// // Селектори\n// export const selectAllOrders = (state) => state.orders.orders;\n// export const selectCurrentOrder = (state) => state.orders.currentOrder;\n// export const selectOrdersLoading = (state) => state.orders.loading;\n// export const selectOrdersError = (state) => state.orders.error;\n// export const selectOrdersSuccessMessage = (state) => state.orders.successMessage;\n\n// // Actions\n// export const { clearError, clearSuccessMessage, clearCurrentOrder } = ordersSlice.actions;\n\n// export default ordersSlice.reducer;\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}