{"ast":null,"code":"var _jsxFileName = \"/Users/serhii_bondariev/Documents/GitHub/PowerTools/frontend/src/context/LanguageContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/LanguageContext.jsx\nimport React, { createContext, useContext, useState } from 'react';\nimport { translations } from '../constants/translations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/createContext();\nexport function LanguageProvider({\n  children\n}) {\n  _s();\n  const [currentLanguage, setCurrentLanguage] = useState('uk');\n  const translate = key => {\n    return translations[currentLanguage][key] || key;\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      currentLanguage,\n      setCurrentLanguage,\n      translate\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n_s(LanguageProvider, \"T/cKtWni0nXPje4i5rav5maGyP8=\");\n_c = LanguageProvider;\nexport const useTranslation = () => {\n  _s2();\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useTranslation must be used within a LanguageProvider');\n  }\n  return context;\n};\n_s2(useTranslation, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","translations","jsxDEV","_jsxDEV","LanguageContext","LanguageProvider","children","_s","currentLanguage","setCurrentLanguage","translate","key","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTranslation","_s2","context","Error","$RefreshReg$"],"sources":["/Users/serhii_bondariev/Documents/GitHub/PowerTools/frontend/src/context/LanguageContext.jsx"],"sourcesContent":["// src/context/LanguageContext.jsx\nimport React, { createContext, useContext, useState } from 'react';\nimport { translations } from '../constants/translations';\n\nconst LanguageContext = createContext();\n\nexport function LanguageProvider({ children }) {\n  const [currentLanguage, setCurrentLanguage] = useState('uk');\n\n  const translate = (key) => {\n    return translations[currentLanguage][key] || key;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ currentLanguage, setCurrentLanguage, translate }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport const useTranslation = () => {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useTranslation must be used within a LanguageProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,SAASC,YAAY,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,eAAe,gBAAGN,aAAa,CAAC,CAAC;AAEvC,OAAO,SAASO,gBAAgBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC7C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE5D,MAAMU,SAAS,GAAIC,GAAG,IAAK;IACzB,OAAOV,YAAY,CAACO,eAAe,CAAC,CAACG,GAAG,CAAC,IAAIA,GAAG;EAClD,CAAC;EAED,oBACER,OAAA,CAACC,eAAe,CAACQ,QAAQ;IAACC,KAAK,EAAE;MAAEL,eAAe;MAAEC,kBAAkB;MAAEC;IAAU,CAAE;IAAAJ,QAAA,EACjFA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B;AAACV,EAAA,CAZeF,gBAAgB;AAAAa,EAAA,GAAhBb,gBAAgB;AAchC,OAAO,MAAMc,cAAc,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAClC,MAAMC,OAAO,GAAGtB,UAAU,CAACK,eAAe,CAAC;EAC3C,IAAI,CAACiB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;EAC1E;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,cAAc;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}